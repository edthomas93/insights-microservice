var cov_obwteinb4=function(){var path='/Users/Tom/Documents/FAB/getting-started-microservice/src/routers/clients.js',hash='9ce5fc24b1124e033d4848d080b6b00e9d387dea',Function=function(){}.constructor,global=new Function('return this')(),gcv='__strykerCoverageCurrentTest__',coverageData={path:'/Users/Tom/Documents/FAB/getting-started-microservice/src/routers/clients.js',statementMap:{'0':{start:{line:1,column:16},end:{line:1,column:34}},'1':{start:{line:2,column:19},end:{line:2,column:50}},'2':{start:{line:3,column:20},end:{line:3,column:45}},'3':{start:{line:4,column:26},end:{line:4,column:59}},'4':{start:{line:5,column:37},end:{line:5,column:57}},'5':{start:{line:7,column:15},end:{line:7,column:31}},'6':{start:{line:9,column:0},end:{line:29,column:5}},'7':{start:{line:12,column:4},end:{line:28,column:5}},'8':{start:{line:13,column:21},end:{line:13,column:61}},'9':{start:{line:15,column:6},end:{line:15,column:69}},'10':{start:{line:16,column:6},end:{line:16,column:20}},'11':{start:{line:18,column:6},end:{line:22,column:7}},'12':{start:{line:20,column:8},end:{line:20,column:63}},'13':{start:{line:21,column:8},end:{line:21,column:18}},'14':{start:{line:25,column:6},end:{line:25,column:76}},'15':{start:{line:27,column:6},end:{line:27,column:39}},'16':{start:{line:31,column:0},end:{line:31,column:24}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:11,column:2},end:{line:11,column:3}},loc:{start:{line:11,column:28},end:{line:29,column:3}},line:11}},branchMap:{'0':{loc:{start:{line:18,column:6},end:{line:22,column:7}},type:'if',locations:[{start:{line:18,column:6},end:{line:22,column:7}},{start:{line:18,column:6},end:{line:22,column:7}}],line:18}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0},f:{'0':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const express=(cov_obwteinb4.s[0]++,require('express'));const{logger}=(cov_obwteinb4.s[1]++,require('@spokedev/fab_logger'));const middlewares=(cov_obwteinb4.s[2]++,require('../middlewares'));const clientsController=(cov_obwteinb4.s[3]++,require('../controllers/clients'));const{BaseError,InternalError}=(cov_obwteinb4.s[4]++,require('../errors'));const router=(cov_obwteinb4.s[5]++,express.Router());cov_obwteinb4.s[6]++;router.post('/',middlewares.schemaCheck('clients_post'),async(req,res,next)=>{cov_obwteinb4.f[0]++;cov_obwteinb4.s[7]++;try{const client=(cov_obwteinb4.s[8]++,await clientsController.create(req.body));// set response code/location/data
cov_obwteinb4.s[9]++;res.status(201).location(`/clients/${client.id}`).json(client);cov_obwteinb4.s[10]++;return next();}catch(err){cov_obwteinb4.s[11]++;if(err instanceof BaseError){cov_obwteinb4.b[0][0]++;cov_obwteinb4.s[12]++;// debug as error captured at clients controller.
logger.debug({msg:'Error From Clients Controller'});cov_obwteinb4.s[13]++;next(err);}else{cov_obwteinb4.b[0][1]++;}// it's important to put the error/message into the object as err/msg here.
// errors are logged when they occur
cov_obwteinb4.s[14]++;logger.error({err,msg:'Unhandled Error From Clients Controller'});// if we reach this point we return internal error
cov_obwteinb4.s[15]++;return next(new InternalError());}});cov_obwteinb4.s[16]++;module.exports=router;