var cov_1xioqcpgxf=function(){var path='/Users/Tom/Documents/FAB/getting-started-microservice/src/adapters/DASAdapter.js',hash='58d677f21dd5d34bd47cbd9e4f4248ceecc2baaf',Function=function(){}.constructor,global=new Function('return this')(),gcv='__strykerCoverageCurrentTest__',coverageData={path:'/Users/Tom/Documents/FAB/getting-started-microservice/src/adapters/DASAdapter.js',statementMap:{'0':{start:{line:1,column:11},end:{line:1,column:37}},'1':{start:{line:2,column:19},end:{line:2,column:50}},'2':{start:{line:3,column:15},end:{line:3,column:35}},'3':{start:{line:4,column:63},end:{line:4,column:83}},'4':{start:{line:7,column:2},end:{line:7,column:42}},'5':{start:{line:8,column:2},end:{line:30,column:3}},'6':{start:{line:9,column:21},end:{line:14,column:6}},'7':{start:{line:16,column:4},end:{line:16,column:56}},'8':{start:{line:17,column:4},end:{line:17,column:20}},'9':{start:{line:20,column:4},end:{line:20,column:56}},'10':{start:{line:22,column:4},end:{line:29,column:5}},'11':{start:{line:24,column:8},end:{line:24,column:58}},'12':{start:{line:26,column:8},end:{line:26,column:58}},'13':{start:{line:28,column:8},end:{line:28,column:54}},'14':{start:{line:34,column:0},end:{line:36,column:2}}},fnMap:{'0':{name:'createClient',decl:{start:{line:6,column:15},end:{line:6,column:27}},loc:{start:{line:6,column:36},end:{line:31,column:1}},line:6}},branchMap:{'0':{loc:{start:{line:22,column:4},end:{line:29,column:5}},type:'switch',locations:[{start:{line:23,column:6},end:{line:24,column:58}},{start:{line:25,column:6},end:{line:26,column:58}},{start:{line:27,column:6},end:{line:28,column:54}}],line:22}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0},f:{'0':0},b:{'0':[0,0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const rp=(cov_1xioqcpgxf.s[0]++,require('request-promise'));const{logger}=(cov_1xioqcpgxf.s[1]++,require('@spokedev/fab_logger'));const config=(cov_1xioqcpgxf.s[2]++,require('../config'));const{InvalidParameterError,DuplicateError,ServerError}=(cov_1xioqcpgxf.s[3]++,require('../errors'));async function createClient(client){cov_1xioqcpgxf.f[0]++;cov_1xioqcpgxf.s[4]++;logger.invocation({args:{client}});cov_1xioqcpgxf.s[5]++;try{const response=(cov_1xioqcpgxf.s[6]++,await rp({url:`${config.DAS.url}/clients`,method:'POST',body:client,json:true}));// assume 200 response = success
cov_1xioqcpgxf.s[7]++;logger.info({msg:'Successfully Created Client'});cov_1xioqcpgxf.s[8]++;return response;}catch(err){cov_1xioqcpgxf.s[9]++;// log error as close to occurance as possible
logger.error({err,msg:'Error Creating Client'});// handle error cases as needed
cov_1xioqcpgxf.s[10]++;switch(err.statusCode){case 400:cov_1xioqcpgxf.b[0][0]++;cov_1xioqcpgxf.s[11]++;throw new InvalidParameterError('Invalid Params');case 409:cov_1xioqcpgxf.b[0][1]++;cov_1xioqcpgxf.s[12]++;throw new DuplicateError('Client Already Exists');default:cov_1xioqcpgxf.b[0][2]++;cov_1xioqcpgxf.s[13]++;throw new ServerError('Something Went Wrong');}}}cov_1xioqcpgxf.s[14]++;module.exports={createClient};