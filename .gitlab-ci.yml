image: spokedev/spoke_runner

variables:
  IMAGE_TRANSIENT: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_RELEASE: ${CI_REGISTRY_IMAGE}/release:${CI_BUILD_REF_NAME}
  IMAGE_ROBOHYDRA: ${CI_REGISTRY_IMAGE}/robohydra:latest
  DOCKER_DRIVER: overlay2
  TARGET_URL_BASE: fab.spokedev.xyz
  APIC_DEV_URL_BASE: https://api.us.apiconnect.ibmcloud.com/dingersjigsawxyz-fab-dev
  DAS_URL: ${APIC_DEV_URL_BASE}/dasg/api

before_script:
  - set -a
  - aws s3 cp s3://xyz.jigsaw.pepperpotts/ ./ --recursive --include "*" --region "eu-west-1";
  - source ./secrets-fab.cfg

stages:
  - install
  - test-phase-1
  - test-phase-2
  - build
  - tag
  - publish
  - test-feature

install:
  stage: install
  artifacts:
    paths:
      - node_modules/
    expire_in: 15mins
  script:
    - npm i
    - npm install sonarjs
  except:
    - tags

build_robohydra:
  stage: install
  image: spokedev/whale
  services:
    - docker:stable-dind
  script:
    - cd tests
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_ROBOHYDRA} .
    - docker push ${IMAGE_ROBOHYDRA}
  except:
    - tags

unit-component:
  stage: test-phase-1
  services:
    - name: ${IMAGE_ROBOHYDRA}
      alias: robohydra
  dependencies:
    - install
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week
  script:
    - npm run test:unit
    - DAS_URL=http://robohydra:4000 npm run test:component
  except:
    - tags

style:
  stage: test-phase-1
  dependencies:
    - install
  script:
    - npm run lint
  except:
    - tags

quality:
  stage: test-phase-1
  dependencies:
    - install
  script:
    - ./node_modules/.bin/sonarjs
  except:
    - tags

verifyDefinitions:
  stage: test-phase-1
  image: spokedev/whale
  dependencies:
    - install
  script:
    - apic validate definitions/*-product.yaml
  except:
    - tags

security:
  stage: test-phase-2
  allow_failure: true
  script:
    - git clone https://github.com/ajinabraham/NodeJsScan.git ./tests/nodejsscan
    - pip install -r ./tests/nodejsscan/requirements.txt
    - pip install nodejsscan
    - nodejsscan -d ./src > ./gl-sast-report.json
    - cat ./gl-sast-report.json
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.mis > 0); then echo "Found Miscellaneous Issues"; exit 1; fi
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.sec > 0); then echo "Found Security Issues"; exit 1; fi
  artifacts:
    paths: [gl-sast-report.json]
  except:
    - tags

dependency_scanning:
  stage: test-phase-2
  image: spokedev/whale
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:11-1-stable" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  except:
    - tags

audit:
  stage: test-phase-2
  allow_failure: true
  dependencies:
    - install
  script:
    - npm install npm@latest -g
    - npm run audit
    - npm audit
  except:
    - tags

build:
  stage: build
  image: spokedev/whale
  dependencies: []
  services:
    - name: docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_TRANSIENT} .
    - docker push ${IMAGE_TRANSIENT}
  except:
    - tags

tag-develop:
  stage: tag
  image: spokedev/whale
  dependencies:
    - build
  script:
    - ./scripts/tag.sh develop
  only:
    - develop


tag-master:
  stage: tag
  image: spokedev/whale
  dependencies:
    - build
  script:
    - ./scripts/tag.sh master
  only:
    - master

publish:
  stage: publish
  image: spokedev/whale
  services:
    - name: docker:dind
  dependencies: []
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${IMAGE_TRANSIENT}
    - docker tag ${IMAGE_TRANSIENT} ${IMAGE_RELEASE}
    - docker push ${IMAGE_RELEASE}
    - ./scripts/save_deploy_files.sh
    - ./scripts/trigger_dev_release.sh
  only:
    - tags
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/

feature-test:
  stage: test-feature
  dependencies: []
  script:
    - npm install
    - APIC_URL=${APIC_DEV_URL_BASE}/dev/gettingstarted npm run test:feature
  only:
    - tags
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/