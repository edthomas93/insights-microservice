variables:
  IMAGE_TRANSIENT: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_RELEASE: ${CI_REGISTRY_IMAGE}/release:${CI_BUILD_REF_NAME}

stages:
  - install
  - test
  - build
  - publish
  - deploy

install:
  stage: install
  image: node:8.10.0
  artifacts:
    paths:
      - node_modules/
    expire_in: 15mins
  script:
    - npm i
    - npm install sonarjs

unit:
  stage: test
  image: node:8.10.0
  dependencies:
    - install
  script:
    - npm run test:unit

component:
  stage: test
  image: node:8.10.0
  dependencies:
    - install
  script:
    - npm run test:component

coverage:
  stage: test
  image: node:8.10.0
  dependencies:
    - install
  script:
    - npm run test:coverage
  artifacts:
    paths:
      - coverage/
  coverage: '/^Statements\s*:\s*([^%]+)/'

style:
  stage: test
  image: node:8.10.0
  dependencies:
    - install
  script:
    - npm run lint

quality:
  stage: test
  image: node:8.10.0
  dependencies:
    - install
  script:
    - ./node_modules/.bin/sonarjs

# verifyDefinitions:
#   stage: test
#   image: node:8.10.0
#   dependencies:
#     - install
#   script:
#     - apic validate definitions/getting-started-product.yaml

nodeJsScan:
  stage: test
  allow_failure: true
  script:
    - NodeJsScan ./src > ./gl-sast-report.json
    - cat ./gl-sast-report.json
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.mis > 0); then echo "Found Miscellaneous Issues"; exit 1; fi
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.sec > 0); then echo "Found Security Issues"; exit 1; fi
  artifacts:
    paths: [gl-sast-report.json]

dependency_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:11-1-stable" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

build:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${DOCKER_ENV_CI_REGISTRY}
    - docker build -t ${IMAGE_TRANSIENT} .
    - docker push ${IMAGE_TRANSIENT}

publish:
  stage: publish
  services:
    - name: docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${DOCKER_ENV_CI_REGISTRY}
    - docker pull ${IMAGE_TRANSIENT}
    - docker tag ${IMAGE_TRANSIENT} ${IMAGE_RELEASE}
    - docker push ${IMAGE_RELEASE}
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/

deploy_dev:
  stage: deploy
  image: spokedev/whale:latest
  dependencies: []
  services:
    - name: docker:dind
  script:
    - scripts/deploy_dev
  when: manual
  environment:
    name: dev
    on_stop: destroy_dev
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/

destroy_dev:
  stage: deploy
  image: spokedev/whale:latest
  services:
    - name: docker:dind
  script:
    - scripts/destroy_dev
  when: manual
  environment:
    name: dev
    action: stop
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/
