image: spokedev/spoke_runner

variables:
  IMAGE_TRANSIENT: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_RELEASE: ${CI_REGISTRY_IMAGE}/release:${CI_BUILD_REF_NAME}
  IMAGE_ROBOHYDRA: ${CI_REGISTRY_IMAGE}/robohydra:latest
  DOCKER_DRIVER: overlay2
  TARGET_URL_BASE: fab.spokedev.xyz

stages:
  - install
  - test
  - build
  - tag
  - publish

install:
  stage: install
  artifacts:
    paths:
      - node_modules/
    expire_in: 15mins
  script:
    - npm i
    - npm install sonarjs
  except:
    - tags

build_robohydra:
  stage: install
  image: docker:latest
  services:
    - docker:stable-dind
  script:
    - cd tests
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_ROBOHYDRA} .
    - docker push ${IMAGE_ROBOHYDRA}

unit:
  stage: test
  dependencies:
    - install
  script:
    - npm run test:unit
  except:
    - tags

component:
  stage: test
  services:
    - name: ${IMAGE_ROBOHYDRA}
      alias: robohydra
  dependencies:
    - install
  script:
    - DAS_URL=http://robohydra:4000 npm run test:component
  except:
    - tags

style:
  stage: test
  dependencies:
    - install
  script:
    - npm run lint
  except:
    - tags

quality:
  stage: test
  dependencies:
    - install
  script:
    - ./node_modules/.bin/sonarjs
  except:
    - tags

verifyDefinitions:
  stage: test
  image: spokedev/whale
  dependencies:
    - install
  script:
    - apic validate definitions/*-product.yaml
  except:
    - tags

nodeJsScan:
  stage: test
  allow_failure: true
  script:
    - NodeJsScan ./src > ./gl-sast-report.json
    - cat ./gl-sast-report.json
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.mis > 0); then echo "Found Miscellaneous Issues"; exit 1; fi
    - if (cat ./gl-sast-report.json | tail -n +4 | jq .total_count.sec > 0); then echo "Found Security Issues"; exit 1; fi
  artifacts:
    paths: [gl-sast-report.json]
  except:
    - tags

dependency_scanning:
  stage: test
  image: docker:latest
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:11-1-stable" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  except:
    - tags


version:
  stage: test
  dependencies:
    - install
  script:
    - ./scripts/check_version_tag.sh

build:
  stage: build
  image: docker:latest
  dependencies: []
  services:
    - name: docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${IMAGE_TRANSIENT} .
    - docker push ${IMAGE_TRANSIENT}
  except:
    - tags

tag:
  stage: tag
  image: spokedev/whale
  dependencies:
    - build
  script:
    - ./scripts/tag.sh
  only:
    - master

publish:
  stage: publish
  image: docker:latest
  services:
    - name: docker:dind
  dependencies: []
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${IMAGE_TRANSIENT}
    - docker tag ${IMAGE_TRANSIENT} ${IMAGE_RELEASE}
    - docker push ${IMAGE_RELEASE}
    - ./scripts/save_deploy_files.sh
    - ./scripts/trigger_dev_release.sh
  only:
    - tags
    - /^v\d+\.\d+\.\d+$/
  except:
    - /^(?!.*(master|v?\d+\.\d+\.\d+)$).*$/
